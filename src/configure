#!/usr/bin/env python

# NDS Toolkit - A suite of tools for hacking Nintendo video games.
# Copyright (C) 2012 Vinny Diehl
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# @file configure - Generates certain files to configure the build.

from os import rename
from re import search

# Constants. Make sure these stay up to date with any file moves/renames.
_CONFIG_FILE = '.ndsconfig'
_MAKEFILE = 'Makefile'
_LINKERMAKE = 'linker.mk'
_CONFIG_HEADER = 'common/config.h'
_CONFIG_HEADER_DIR = 'common'
_CONFIG_HEADER_NAME = 'config.h'

# Defaults:
_MAKEFILE_DEFAULT = 'SETUP = default'
_CONFIG_HEADER_DEFAULT = '''\
#define ADD_BUTTON_ACTIVATOR_GENERATOR
#define ADD_POINTER_SEARCHER
#define ADD_CODE_PORTER
#define ADD_CODE_COMPRESSOR
#define ADD_CODE_BEAUTIFIER\
'''

# Check all fatals before anything else.

try:
    # Verify Makefile. If the file doesn't exist or doesn't have a proper
    # area for this to generate into, error.
    with open(_MAKEFILE) as makefile_file:
        makefile = makefile_file.read().split('\n')
        makefile_strip = [line.strip() for line in makefile]

        # Kill it if it doesn't have config designators
        # :WARNING: 2012-06-11 gbchaosmaster - Not complete protection here!
        # If the end designator is before the begin, it will still make it
        # past this. But if somebody does that, fuck them.
        if '### BEGIN CONFIG ###' not in makefile_strip or \
           '### END CONFIG ###' not in makefile_strip:
            print '''\
ERROR: Your Makefile is not set up for this configuration.
Ensure that the designated area for the configutation has not been modified.

It should contain an area near the top (just under the usage description)
with the following format:

### BEGIN CONFIG ###
<there may or may not be content inside>
### END CONFIG ###

If this is not present, contact whoever messed with it.

Aborting configuration.\
'''
            exit(1)

        # While we're here, if we succeeded, grab the indexes of the things.
        makefile_begin_index = makefile_strip.index('### BEGIN CONFIG ###')
        makefile_end_index = makefile_strip.index('### END CONFIG ###')
except IOError:
    # If they don't have a Makefile, that's a Bad Thing. Bail!
    print '''\
ERROR: Either you don't have a Makefile, or something went wrong.
Please check to make sure the file is in the right spot.

Aborting configuration.\
'''
    exit(404) # Hahaha...

try:
    # Verify linker.mk. If the file doesn't exist or doesn't have a proper
    # area for this to generate into, error.
    with open(_LINKERMAKE) as linkermake_file:
        linkermake = linkermake_file.read().split('\n')
        linkermake_strip = [line.strip() for line in linkermake]

        # Kill it if it doesn't have config designators
        # :WARNING: 2012-06-11 gbchaosmaster - Not complete protection here!
        # If the end designator is before the begin, it will still make it
        # past this. But if somebody does that, fuck them.
        if '### BEGIN CONFIG ###' not in linkermake_strip or \
           '### END CONFIG ###' not in linkermake_strip:
            print '''\
ERROR: linker.mk is not set up for this configuration.
Ensure that the designated area for the configutation has not been modified.

It should contain an area near the top (just under the file description) with
the following format:

### BEGIN CONFIG ###
<there may or may not be content inside>
### END CONFIG ###

If this is not present, contact whoever messed with it.

Aborting configuration.\
'''
            exit(1)

        # While we're here, if we succeeded, grab the indexes of the things.
        linkermake_begin_index = linkermake_strip.index('### BEGIN CONFIG ###')
        linkermake_end_index = linkermake_strip.index('### END CONFIG ###')
except IOError:
    # If they don't have a Makefile, that's a Bad Thing. Bail!
    print '''\
ERROR: Either you don't have a linker.mk, or something went wrong.
Please check to make sure the file is in the right spot.

Aborting configuration.\
'''
    exit(404)

try:
    # Verify common/config.h. If the file doesn't exist or doesn't have proper
    # header guards in place, that's a problem; error.
    with open(_CONFIG_HEADER) as config_header_file:
        config_header = config_header_file.read().split('\n')
        config_header_strip = [line.strip() for line in config_header]

        # Kill it if it doesn't have header guards
        if '#define CONFIG_H_INCLUDED' not in config_header_strip or \
           '#endif // CONFIG_H_INCLUDED' not in config_header_strip:
            print '''\
ERROR: The file common/config.h is not set up for this configuration.
Ensure that the file contains proper header guard words.

Near the top (just under the @file doc comment) should be the lines:

#ifndef CONFIG_H_INCLUDED
#define CONFIG_H_INCLUDED

And at the very bottom should be the line:

#endif // CONFIG_H_INCLUDED

If these are not present, please contact whoever messed with them.

Aborting configuration.\
'''
            exit(1)

        # Same as above, grab the indexes
        config_header_begin_index = \
                config_header_strip.index('#define CONFIG_H_INCLUDED')
        config_header_end_index = \
                config_header_strip.index('#endif // CONFIG_H_INCLUDED')
except IOError:
    # Bail if they're missing the config header.
    print '''\
ERROR: Either common/config.h doesn't exist, or something went wrong.
       Please re-check and try again.\
'''
    exit(404)

try:
    # If we can open up the file successfully, that's great, read it into
    # a list containing its non-empty lines.
    with open(_CONFIG_FILE) as config_file:
        config = [
            line
            for line in [l.strip() for l in config_file.read().split('\n')]
            if line != ''
        ]

        # A blank .ndsconfig will fall back to the default configuration.
        # [] is an implicit False; might as well use the same test as below
        # for clarity. This is intended behavior, but is it the best?
        if not config:
            print 'WARNING: .ndsconfig is blank, using default configuration.'
except IOError:
    # If there is no .ndsconfig file or if there is an error of any kind,
    # it's not fatal; just use the default configuration.
    config = []
    print 'No .ndsconfig file found; using default configuration.'

# Now that everything is loaded okay, time to define this:
def configure(makefile_input=_MAKEFILE_DEFAULT,
              config_header_input=_CONFIG_HEADER_DEFAULT):
    '''Write the files that need to be configured.'''

    print 'Writing files...'

    # We'll do the Makefile first. Pull in the part up to (and including!) the
    # first designator, then add the input, then slap on the rest.
    makefile_new = makefile[:makefile_begin_index + 1] + \
                   [makefile_input] + \
                   makefile[makefile_end_index:]

    # linker.mk is no different; note that it uses the same input as above.
    linkermake_new = linkermake[:linkermake_begin_index + 1] + \
                     [makefile_input] + \
                     linkermake[linkermake_end_index:]

    # And now the config.h... For this one we want blank lines in between the
    # options and the header guards.
    config_header_new = config_header[:config_header_begin_index + 1] + \
                        ['\n%s\n' % config_header_input] + \
                        config_header[config_header_end_index:]

    # And now, time to write the files, saving our configuration.

    # Be responsible and use swap files, format .<original name>.configure.swp
    makefile_swap = '.%s.configure.swp' % _MAKEFILE
    linkermake_swap = '.%s.configure.swp' % _LINKERMAKE
    config_header_swap = \
        '%s/.%s.configure.swp' % (_CONFIG_HEADER_DIR, _CONFIG_HEADER_NAME)

    # Join the compiled lists into strings to write to the swap files.
    open(makefile_swap, 'w').write('\n'.join(makefile_new))
    open(linkermake_swap, 'w').write('\n'.join(linkermake_new))
    open(config_header_swap, 'w').write('\n'.join(config_header_new))

    # Overwrite the originals with the swap files and we're done.
    rename(makefile_swap, _MAKEFILE)
    print 'Success: %s written.' % _MAKEFILE
    rename(linkermake_swap, _LINKERMAKE)
    print 'Success: %s written.' % _LINKERMAKE
    rename(config_header_swap, _CONFIG_HEADER)
    print 'Success: %s written.' % _CONFIG_HEADER

if not config:
    # Set up the default configuration and leave if there's no .ndsconfig.
    configure()
    print 'Configuration complete!'
    exit(0)

# If they do have a .ndsconfig, parse the options out of it and store them
# in their appropriate lists.

makefile_options = []
config_header_options = []

# :KLUDGE: 2012-06-12 gbchaosmaster - Very WET code repeating the same loop.
# Ouch. The purpose of this is twofold: It stops duplicate entries, and
# enforces the order of the options in the configured files. Just having one
# loop with a series of if statements inside gives the writer of the .ndsconfig
# way too much power. There has to be a better way to do this, though. Maybe
# try abstracting the loop to a function?

for option in config:
    if search(r'add[_-]options?\s+--add-button-activator-generator', option):
        makefile_options.append('''\
BUTTON_ACTIVATOR_GENERATOR = ButtonActivatorGenerator.o \\
                             pgButtonActivatorGenerator.o\
'''
        )
        config_header_options.append(
            '#define ADD_BUTTON_ACTIVATOR_GENERATOR'
        )
        break
for option in config:
    if search(r'add[_-]options?\s+--add-pointer-searcher', option):
        makefile_options.append(
            'POINTER_SEARCHER = PointerSearcher.o PSR.o pgPointerSearcher.o'
        )
        config_header_options.append(
            '#define ADD_POINTER_SEARCHER'
        )
        break
for option in config:
    if search(r'add[_-]options?\s+--add-code-porter', option):
        makefile_options.append(
            'CODE_PORTER = CodePorter.o pgCodePorter.o'
        )
        config_header_options.append(
            '#define ADD_CODE_PORTER'
        )
        break
for option in config:
    if search(r'add[_-]options?\s+--add-code-compressor', option):
        makefile_options.append('''\
CODE_COMPRESSOR = LoopCodeGenerator.o PatchCodeBuilder.o \\
                  ghCodeLineInput.o pgCodeCompressor.o\
''')
        config_header_options.append(
            '#define ADD_CODE_COMPRESSOR'
        )
        break
for option in config:
    if search(r'add[_-]options?\s+--add-code-beautifier', option):
        makefile_options.append(
'CODE_BEAUTIFIER = pgCodeBeautifier.o'
        )
        config_header_options.append(
            '#define ADD_CODE_BEAUTIFIER'
        )
        break

# We've parsed all of the options, now send them off to configure().

if not makefile_options and not config_header_options:
    # If, after looking through all of their options, there aren't any valid
    # ones, tell them so and then fall back to the default configuration.
    print 'No valid options in .ndsconfig; using default configuration.'
    configure()
else:
    # Otherwise, they made it, do the final configuration and finish up.
    print 'Successfully read .ndsconfig options, configuring now.'
    configure('\n'.join(makefile_options), '\n'.join(config_header_options))

print 'Configuration complete!'
